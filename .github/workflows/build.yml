name: Build Desktop App

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-20.04]
        python-version: ['3.11']
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libfontconfig1 \
          libx11-xcb1 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-xinerama0 \
          libxkbcommon-x11-0 \
          libxkbcommon0 \
          xvfb
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Build with PyInstaller (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller app.spec
        # Create zip archive
        Compress-Archive -Path "dist/MyApp" -DestinationPath "MyApp-windows.zip"
      shell: powershell
    
    - name: Build with PyInstaller (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        pyinstaller app.spec
        # Create dmg-ready structure
        mkdir -p dist-mac
        if [ -d "dist/MyApp.app" ]; then
          cp -r dist/MyApp.app dist-mac/
        else
          cp -r dist/MyApp dist-mac/
        fi
        # Create tar.gz archive
        cd dist-mac
        tar -czf ../MyApp-macos.tar.gz .
        cd ..
    
    - name: Build with PyInstaller (Linux)
      if: matrix.os == 'ubuntu-20.04'
      run: |
        # Use xvfb for headless build
        xvfb-run -a pyinstaller app.spec
        # Create tar.gz archive
        cd dist
        tar -czf ../MyApp-linux.tar.gz MyApp
        cd ..
    
    - name: Upload Windows artifact
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: MyApp-Windows
        path: MyApp-windows.zip
        retention-days: 30
    
    - name: Upload macOS artifact
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: MyApp-macOS
        path: MyApp-macos.tar.gz
        retention-days: 30
    
    - name: Upload Linux artifact
      if: matrix.os == 'ubuntu-20.04'
      uses: actions/upload-artifact@v4
      with:
        name: MyApp-Linux
        path: MyApp-linux.tar.gz
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/MyApp-Windows/MyApp-windows.zip
          artifacts/MyApp-macOS/MyApp-macos.tar.gz
          artifacts/MyApp-Linux/MyApp-linux.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
